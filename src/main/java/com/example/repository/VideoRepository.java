package com.example.repository;import com.example.entity.VideoEntity;import com.example.mapper.VideoFullInfoMapper;import com.example.mapper.VideoPlayListInfoMapper;import com.example.mapper.VideoShortInfoMapper;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Query;public interface VideoRepository extends JpaRepository<VideoEntity, String> {    Page<VideoEntity> findAllByCategoryId(Integer categoryId, Pageable pageable);    Page<VideoEntity> findAllByTitle(String title, Pageable pageable);    @Query("from VideoEntity" +            " order by createdDate")    Page<VideoEntity> findAllByCreatedDate(Pageable pageable);    @Query(value = "select v" +            " from" +            " video as v" +            " inner join public.video_tag vt on v.id = vt.video_id", nativeQuery = true)    Page<VideoEntity> findAllByTagId(Integer tagId, Pageable pageable);    @Query(value = "select v.id as video_id," +            "       v.title, v.category_id, v.attach_id, v.channel_id," +            "       v.description, v.video_type, v.video_status, v.created_date," +            "       p.id as prt_id, p.name, p.surname" +            " from video as v" +            "         inner join profile as p on v.prt_id = p.id", nativeQuery = true)    Page<VideoShortInfoMapper> pagingVideoShortInfo(Pageable pageable);    @Query(value = "select v.id   as video_id," +            "       v.title, v.description," +            "       pa.id  as preview_id, pa.url as preview_url," +            "       a.id   as attach_id, a.path, a.duration," +            "       c.id   as category_id, c.name," +            "       v.published_date," +            "       ch.id  as channel_id, ch.name, ch.photo_id," +            "       v.view_count, v.shared_count, v.like_count, v.dislike_count," +            "       a.duration" +            " from video as v" +            "         inner join preview_attach as pa on v.preview_attach_id = pa.id" +            "         inner join attach as a on v.attach_id = a.id" +            "         inner join category as c on v.category_id = c.id" +            "         inner join channel as ch on v.channel_id = ch.id" +            "         inner join video_tag as vt on v.id = vt.video_id", nativeQuery = true)    Page<VideoFullInfoMapper> pagingVideoFullInfo(Pageable pageable);    @Query(value = "select v.id, v.title, pa.id, pa.url," +            " v.view_count, v.published_date, a.duration" +            " from video as v" +            "         inner join preview_attach as pa on v.preview_attach_id = pa.id" +            "         inner join attach as a on v.attach_id = a.id", nativeQuery = true)    Page<VideoPlayListInfoMapper> pagingVideoPlaylistInfo(Pageable pageable);}