package com.example.service;import com.example.config.CustomUserDetails;import com.example.dto.ApiResponse;import com.example.dto.CommentDTO;import com.example.entity.CommentEntity;import com.example.enums.ProfileRole;import com.example.repository.CommentRepository;import com.example.util.SpringSecurityUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class CommentService {    @Autowired    private CommentRepository commentRepository;    private CommentEntity TO_ENTITY(CommentDTO dto) {        CommentEntity entity = new CommentEntity();        entity.setProfileId(dto.getProfileId());        entity.setVideoId(dto.getVideoId());        entity.setContent(dto.getContent());        entity.setReplyId(dto.getReplyId());        return entity;    }    private CommentDTO TO_DTO(CommentEntity entity) {        CommentDTO dto = new CommentDTO();        dto.setProfileId(entity.getProfileId());        dto.setContent(entity.getContent());        dto.setReplyId(entity.getReplyId());        dto.setLikeCount(entity.getLikeCount());        dto.setDislikeCount(entity.getDislikeCount());        dto.setCreatedDate(entity.getCreatedDate());//        dto.setVideoId(entity.getVideoId());//        dto.setId(entity.getId());//        dto.setVisible(entity.getVisible());        return dto;    }    public ApiResponse create(CommentDTO dto) {        dto.setProfileId(SpringSecurityUtil.getCurrentProfileId());// set prtId        CommentEntity entity = TO_ENTITY(dto);        CommentEntity created = commentRepository.save(entity);        return new ApiResponse(true, TO_DTO(created));    }    public ApiResponse update(String id, String newContent) {        CustomUserDetails currentUser = SpringSecurityUtil.getCurrentUser();        Optional<CommentEntity> optionalComment = commentRepository.findById(id);        if (optionalComment.isPresent()) {            CommentEntity entity = optionalComment.get();            if (entity.getProfileId().equals(currentUser.getProfile().getId()) ||                    currentUser.getProfile().getRole().equals(ProfileRole.ROLE_ADMIN)) {                entity.setContent(newContent);                CommentEntity updated = commentRepository.save(entity);                return new ApiResponse(true, TO_DTO(updated));            } else {                return new ApiResponse(false, "UPDATE COMMENT NOT ACCESS FOR YOU!");            }        }        return new ApiResponse(false, "COMMENT NOT FOUND!");    }    public ApiResponse delete(String id) {        CustomUserDetails currentUser = SpringSecurityUtil.getCurrentUser();        Optional<CommentEntity> optionalComment = commentRepository.findById(id);        if (optionalComment.isPresent()) {            CommentEntity entity = optionalComment.get();            if (entity.getProfileId().equals(currentUser.getProfile().getId()) ||                    currentUser.getProfile().getRole().equals(ProfileRole.ROLE_ADMIN)) {                commentRepository.deleteById(id);                return new ApiResponse(true, "SUCCESS DELETED COMMENT id: " + id);            } else {                return new ApiResponse(false, "DELETED COMMENT NOT ACCESS FOR YOU!");            }        }        return new ApiResponse(false, "COMMENT NOT FOUND!");    }    public Page<CommentDTO> paging(Integer page, Integer size) {        Sort sort = Sort.by("createdDate").descending();        Pageable pageable = PageRequest.of(page, size, sort);        Page<CommentEntity> commentEntityPage = commentRepository.findAll(pageable);        List<CommentDTO> commentDTOList = commentEntityPage                .stream()                .map(this::TO_DTO)                .toList();        return new PageImpl<>(commentDTOList, pageable, commentEntityPage.getTotalElements());    }    public List<CommentDTO> getList(Integer id, Integer page, Integer size) {        Sort sort = Sort.by("createdDate").descending();        Pageable pageable = PageRequest.of(page, size, sort);        Page<CommentEntity> commentEntityPage = commentRepository.findAllByProfileId(pageable);        return commentEntityPage                .stream()                .map(this::TO_DTO)                .toList();    }    public Page<CommentDTO> pagingByProfileId(Integer id, Integer page, Integer size) {        Sort sort = Sort.by("createdDate").descending();        Pageable pageable = PageRequest.of(page, size, sort);        Page<CommentEntity> commentEntityPage = commentRepository.findAllByProfileId(pageable);        List<CommentDTO> commentDTOList = commentEntityPage                .stream()                .map(this::TO_DTO)                .toList();        return new PageImpl<>(commentDTOList, pageable, commentEntityPage.getTotalElements());    }}