package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.VideoDTO;import com.example.entity.VideoEntity;import com.example.enums.VideoStatus;import com.example.repository.VideoRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class VideoService {    @Autowired    private VideoRepository videoRepository;    private VideoEntity TO_ENTITY(VideoDTO dto) {        VideoEntity entity = new VideoEntity();        entity.setPreviewAttachId(dto.getPreviewAttachId());        entity.setTitle(dto.getTitle());        entity.setCategoryId(dto.getCategoryId());        entity.setAttachId(dto.getAttachId());        entity.setChannelId(dto.getChannelId());        entity.setVideoType(dto.getVideoType());        entity.setVideoStatus(dto.getVideoStatus());        entity.setDescription(dto.getDescription());        //all counts are default 0        return entity;    }    private VideoDTO TO_DTO(VideoEntity entity) {        VideoDTO dto = new VideoDTO();        dto.setId(entity.getId());        dto.setVisible(entity.getVisible());        dto.setCreatedDate(entity.getCreatedDate());        dto.setPreviewAttachId(entity.getPreviewAttachId());        dto.setTitle(entity.getTitle());        dto.setCategoryId(entity.getCategoryId());        dto.setAttachId(entity.getAttachId());        dto.setChannelId(entity.getChannelId());        dto.setVideoType(entity.getVideoType());        dto.setVideoStatus(entity.getVideoStatus());        dto.setDescription(entity.getDescription());        return dto;    }    public ApiResponse create(VideoDTO dto) {        VideoEntity entity = TO_ENTITY(dto);        VideoEntity created = videoRepository.save(entity);        return new ApiResponse(true, TO_DTO(entity));    }    public ApiResponse update(String id, VideoDTO dto) {        Optional<VideoEntity> optionalVideo = videoRepository.findById(id);        if (optionalVideo.isPresent()) {            VideoEntity videoEntity = optionalVideo.get();//            videoEntity.setPreviewAttachId(dto.getPreviewAttachId()); //TODO            videoEntity.setTitle(dto.getTitle());            videoEntity.setCategoryId(dto.getCategoryId());//            videoEntity.setAttachId(dto.getAttachId());//            videoEntity.setChannelId(dto.getChannelId());            videoEntity.setVideoType(dto.getVideoType());            videoEntity.setVideoStatus(dto.getVideoStatus());            videoEntity.setDescription(dto.getDescription());            VideoEntity updated = videoRepository.save(videoEntity);            return new ApiResponse(true, TO_DTO(updated));        }        return new ApiResponse(false, "UPDATE DETAILS FAILED!!!");    }    public ApiResponse updateStatus(String id) {        Optional<VideoEntity> optionalVideo = videoRepository.findById(id);        if (optionalVideo.isPresent()) {            VideoEntity entity = optionalVideo.get();            if (entity.getVideoStatus().equals(VideoStatus.PUBLIC)) {                entity.setVideoStatus(VideoStatus.PRIVATE);            } else {                entity.setVideoStatus(VideoStatus.PUBLIC);            }            VideoEntity updated = videoRepository.save(entity);            return new ApiResponse(true, TO_DTO(updated));        }        return new ApiResponse(false, "UPDATE STATUS FAILED!!!");    }    public ApiResponse increaseViewCount(String id) {        Optional<VideoEntity> optionalVideo = videoRepository.findById(id);        if (optionalVideo.isPresent()) {            VideoEntity entity = optionalVideo.get();            long viewCount = entity.getViewCount();            entity.setViewCount(++viewCount);            VideoEntity updated = videoRepository.save(entity);            return new ApiResponse(true, TO_DTO(updated));        }        return new ApiResponse(false, "UPDATE VIEW COUNT FAILED!!!");    }    public Page<VideoDTO> pagingByCategoryId(Integer categoryId, Integer page, Integer size) {        Sort sort = Sort.by("viewCount");        Pageable pageable = PageRequest.of(page, size, sort);        Page<VideoEntity> videoEntityPage = videoRepository                .findAllByCategoryId(categoryId, pageable);        List<VideoDTO> videoDTOList = videoEntityPage                .stream()                .map(this::TO_DTO)                .toList();        return new PageImpl<>(videoDTOList, pageable, videoEntityPage.getTotalPages());    }    public Page<VideoDTO> searchVideoByTitle(String title, Integer page, Integer size) {        Sort sort = Sort.by("viewCount");        Pageable pageable = PageRequest.of(page, size, sort);        Page<VideoEntity> videoEntityPage = videoRepository                .findAllByTitle(title, pageable);        List<VideoDTO> videoDTOList = videoEntityPage                .stream()                .map(this::TO_DTO)                .toList();        return new PageImpl<>(videoDTOList, pageable, videoEntityPage.getTotalPages());    }//    public Page<VideoDTO> pagingByTagId(List<Integer> id, Integer page, Integer size) {//        Sort sort = Sort.by("viewCount");//        Pageable pageable = PageRequest.of(page, size, sort);//        Page<VideoEntity> videoEntityPage = videoRepository//                .findAllByTagId(id, pageable);//        List<VideoDTO> videoDTOList = videoEntityPage//                .stream()//                .map(this::TO_DTO)//                .toList();//        return new PageImpl<>(videoDTOList, pageable, videoEntityPage.getTotalPages());//    }}