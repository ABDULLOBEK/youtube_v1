package com.example.service;import com.example.dto.ApiResponse;import com.example.dto.JwtDTO;import com.example.entity.EmailHistoryEntity;import com.example.entity.ProfileEntity;import com.example.enums.ProfileStatus;import com.example.exception.AppBadRequestException;import com.example.repository.EmailHistoryRepository;import com.example.repository.ProfileRepository;import com.example.util.HTMLUtil;import com.example.util.JWTUtil;import jakarta.mail.MessagingException;import jakarta.mail.internet.MimeMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Service;import java.nio.charset.StandardCharsets;import java.util.Optional;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;@Servicepublic class EmailSenderService {    @Autowired    private JavaMailSender javaMailSender;    @Autowired    private ProfileRepository profileRepository;    @Autowired    private EmailHistoryService emailHistoryService;    @Autowired    private EmailHistoryRepository emailHistoryRepository;    @Value("${server.url}")    private String serverUrl;    @Value("${spring.mail.username}")    private String fromEmail;    void sendMimeEmail(String toAccount, String subject, String text) {        try {            MimeMessage msg = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(msg, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, StandardCharsets.UTF_8.name());            msg.setFrom(fromEmail);            helper.setTo(toAccount);            helper.setSubject(subject);            helper.setText(text, true);            javaMailSender.send(msg);        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }    public ApiResponse sendEmailVerification(String toAccount) {        ExecutorService executor = Executors.newSingleThreadExecutor();        String jwt = JWTUtil.encode(toAccount);//        serverUrl = "http://localhost:8082"; // for email port        String url = serverUrl + "/api/v1/mail-sender/verification/email/" + jwt;        executor.submit(() -> {            sendMimeEmail(toAccount, "YOUTUBE VERIFICATION", HTMLUtil.getRegistrationButton(url));            EmailHistoryEntity entity = new EmailHistoryEntity();            entity.setToEmail(toAccount);            entity.setMessage(url);            emailHistoryRepository.save(entity);            executor.shutdown();        });        return new ApiResponse(true, "SUCCESS SEND VERIFICATION PAGE!");    }    public ApiResponse sendUpdateEmailVerification(String oldEmail, String newEmail) {        ExecutorService executor = Executors.newSingleThreadExecutor();        String jwt = JWTUtil.encode(oldEmail);//        serverUrl = "http://localhost:8080"; // for email port        String url = serverUrl + "/api/v1/verification/update-email/" + jwt + "/" + oldEmail + "/" + newEmail;        executor.submit(() -> {            sendMimeEmail(newEmail, "CLICK BUTTON FOR UPDATE YOUTUBE EMAIL VERIFICATION", HTMLUtil.getRegistrationButton(url));            EmailHistoryEntity entity = new EmailHistoryEntity();            entity.setToEmail(newEmail);            entity.setMessage(url);            emailHistoryRepository.save(entity);            executor.shutdown();        });        return new ApiResponse(true, "SUCCESS SEND VERIFICATION PAGE!");    }    public ApiResponse emailVerification(String jwt) {        JwtDTO jwtDTO = JWTUtil.decode(jwt);        Optional<ProfileEntity> exists = profileRepository.findByEmail(jwtDTO.getEmail());        if (exists.isEmpty()) {            throw new AppBadRequestException("Profile not found");        }        ProfileEntity entity = exists.get();        if (!entity.getStatus().equals(ProfileStatus.REGISTRATION)) {            throw new AppBadRequestException("Wrong status");        }        sendResponse(jwtDTO.getEmail());        entity.setStatus(ProfileStatus.ACTIVE);        entity.setVisible(true);        profileRepository.save(entity); // update        return new ApiResponse(true, "Registration completed");    }    public void sendResponse(String toEmail) {        try {            MimeMessage message = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, StandardCharsets.UTF_8.name());            helper.setTo(toEmail);            helper.setSubject("Update email");            helper.setText(HTMLUtil.getResponse(), true);            javaMailSender.send(message);            System.out.println("SUCCESS SENT TO " + toEmail);        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }}