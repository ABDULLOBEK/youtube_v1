package com.example.controller;import com.example.dto.ApiResponse;import com.example.dto.CommentDTO;import com.example.service.CommentService;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.tags.Tag;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.time.LocalDate;import java.util.List;@RestController@RequestMapping("/api/v1/comment")@Tag(name = "COMMENT üí¨", description = "this api used for CRUD and get methods!")public class CommentController {    @Autowired    private CommentService commentService;    @Operation(summary = "create new comment üí≠", description = "this api used for creating new comment!")    @PostMapping("/close/create")    public ResponseEntity<ApiResponse> create(@Valid @RequestBody CommentDTO dto) {        ApiResponse response = commentService.create(dto);        return ResponseEntity.status(HttpStatus.CREATED).body(response);    }    @Operation(summary = "update comment \uD83D\uDD04", description = "this api used for update content comment!")    @PutMapping("/close/update/{id}")    public ResponseEntity<ApiResponse> update(@PathVariable String id,                                              @RequestParam String content) {        ApiResponse response = commentService.update(id, content);        return ResponseEntity.ok(response);    }    @Operation(summary = "delete comment ‚ùå", description = "this api used for delete comment by id!")    @DeleteMapping("/close/delete/{id}")    public ResponseEntity<ApiResponse> delete(@PathVariable String id) {        ApiResponse response = commentService.delete(id);        return ResponseEntity.ok(response);    }    @Operation(summary = "get comment list by id \uD83D\uDCC2", description = "this api used for get comment list by id!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/list/by-user/{id}")    public ResponseEntity<List<CommentDTO>> getList(@PathVariable Integer id,                                                    @RequestParam(defaultValue = "0") Integer page,                                                    @RequestParam(defaultValue = "30") Integer size) {        return ResponseEntity.ok(commentService.getList(id, page, size));    }    @Operation(summary = "paging comment list  \uD83D\uDCC4", description = "this api used for paging comment list!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/paging")    public ResponseEntity<Page<CommentDTO>> paging(@RequestParam(defaultValue = "0") Integer page,                                                   @RequestParam(defaultValue = "30") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.paging(page, size);        return ResponseEntity.ok(commentDTOPage);    }    @Operation(summary = "paging comment list by profile id \uD83D\uDC64 \uD83D\uDCC4", description = "this api used for paging comment list by profile id!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/paging/by-user/{id}")    public ResponseEntity<Page<CommentDTO>> pagingByProfileId(@PathVariable Integer id,                                                              @RequestParam(defaultValue = "0") Integer page,                                                              @RequestParam(defaultValue = "30") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.pagingByProfileId(id, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @Operation(summary = "paging comment list by content \uD83D\uDCC4", description = "this api used for paging comment list by content!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/paging/by-content/{content}")    public ResponseEntity<Page<CommentDTO>> pagingByContent(@PathVariable String content,                                                            @RequestParam(defaultValue = "0") Integer page,                                                            @RequestParam(defaultValue = "30") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.pagingByContent(content, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @Operation(summary = "paging comment list by created date \uD83D\uDCC4", description = "this api used for paging comment list by created date!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/paging/by-create-date/{date}")    public ResponseEntity<Page<CommentDTO>> pagingByCreatedDate(@PathVariable LocalDate date,                                                                @RequestParam(defaultValue = "0") Integer page,                                                                @RequestParam(defaultValue = "30") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.pagingByCreatedDate(date, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @Operation(summary = "paging comment list by like count üëç", description = "this api used for paging comment list by like count!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/paging/by-like-count/{count}")    public ResponseEntity<Page<CommentDTO>> pagingByLikeCount(@PathVariable Long count,                                                              @RequestParam(defaultValue = "0") Integer page,                                                              @RequestParam(defaultValue = "30") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.pagingByLikeCount(count, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @Operation(summary = "paging comment list by dislike count üëé", description = "this api used for paging comment list by dislike count!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/paging/by-dislike-count/{count}")    public ResponseEntity<Page<CommentDTO>> pagingByDislikeCount(@PathVariable Long count,                                                                 @RequestParam(defaultValue = "0") Integer page,                                                                 @RequestParam(defaultValue = "30") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.pagingByDislikeCount(count, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @Operation(summary = "paging comment list by video idüÜî", description = "this api used for paging comment list by video id!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/paging/by-video/{id}")    public ResponseEntity<Page<CommentDTO>> pagingByVideoId(@PathVariable String id,                                                                 @RequestParam(defaultValue = "0") Integer page,                                                                 @RequestParam(defaultValue = "30") Integer size) {        Page<CommentDTO> commentDTOPage = commentService.pagingByVideoId(id, page, size);        return ResponseEntity.ok(commentDTOPage);    }    @Operation(summary = "paging comment list by video name \uD83C\uDFAC", description = "this api used for paging comment list by video name!")    @PreAuthorize("hasRole('ADMIN')")    @GetMapping("/close/paging/by-video/{title}")    public ResponseEntity<Page<CommentDTO>> findAllByVideoTitle(@PathVariable String title,                                                            @RequestParam(defaultValue = "0") Integer page,                                                            @RequestParam(defaultValue = "30") Integer size) {        Page<CommentDTO> commentDTOPage = commentService                .findAllByVideoTitle(title, page, size);        return ResponseEntity.ok(commentDTOPage);    }}